<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context" 
	   xmlns:jdbc="http://www.springframework.org/schema/jdbc" 
	   xmlns:jee="http://www.springframework.org/schema/jee"
	   xmlns:tx="http://www.springframework.org/schema/tx" 
	   xmlns:jpa="http://www.springframework.org/schema/data/jpa" 
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:cache="http://www.springframework.org/schema/cache" 
	   xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd  
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.1.xsd
        http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd">

	<description>Spring公共配置</description>
	<context:property-placeholder ignore-unresolvable="true" local-override="true" location="classpath*:/application.properties" />
	<!-- 数据源配置, 使用DBCP数据库连接池 -->
	<bean id="dataSourcemysqlA" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.mysqlA.driver}" />
		<property name="url" value="${jdbc.mysqlA.url}" />
		<property name="username" value="${jdbc.mysqlA.username}" />
		<property name="password" value="${jdbc.mysqlA.password}" />
		<property name="maxActive" value="${dbcp.maxActive}" />
		<property name="maxIdle" value="${dbcp.maxIdle}" />
		<property name="defaultAutoCommit" value="false" />
		<!-- 连接一个小时后超时 -->
		<property name="timeBetweenEvictionRunsMillis" value="3600000" />
		<property name="minEvictableIdleTimeMillis" value="3600000" />
	</bean>
	
	<bean id="dataSourcemysqlB" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.mysqlB.driver}" />
		<property name="url" value="${jdbc.mysqlB.url}" />
		<property name="username" value="${jdbc.mysqlB.username}" />
		<property name="password" value="${jdbc.mysqlB.password}" />
		<property name="maxActive" value="${dbcp.maxActive}" />
		<property name="maxIdle" value="${dbcp.maxIdle}" />
		<property name="defaultAutoCommit" value="false" />
		<!-- 连接一个小时后超时 -->
		<property name="timeBetweenEvictionRunsMillis" value="3600000" />
		<property name="minEvictableIdleTimeMillis" value="3600000" />
	</bean>	
	
  <bean id="multipleDataSource" class="lishuai.common.db.MultipleDataSource">
        <property name="defaultTargetDataSource" ref="dataSourcemysqlB"/>
        <property name="targetDataSources">
            <map>
                <entry key="dataSourcemysqlA" value-ref="dataSourcemysqlA"/>
                <entry key="dataSourcemysqlB" value-ref="dataSourcemysqlB"/>
            </map>
        </property>
    </bean>	
	
	
	
	<!--定义JdbcTemplate的Bean-->
     <!-- <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
      <property name="dataSource" ref="dataSource"></property>
     </bean> -->
     
    <!-- 开启注解配置 -->  
    <context:annotation-config  />
    
    <!-- 开启spring定时任务 -->
    <task:annotation-driven scheduler="qbScheduler" mode="proxy"/>  
    <task:scheduler id="qbScheduler" pool-size="10"/>  
    <context:component-scan base-package="lishuai.task" />
    
    
     <!-- 添加spring缓存配置 -->
     <cache:annotation-driven cache-manager="springcacheManager" />
     <bean id="springcacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
       <property name="cacheManager" ref="cacheManager"></property>
     </bean>
     <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
           <property name="configLocation" value="classpath:/spring/ehcache.xml"></property>
     </bean>
     <context:component-scan base-package="lishuai.common.util" />
     <context:component-scan base-package="lishuai.action" />
     
	<!--创建事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="multipleDataSource" />
	</bean>
	
	<!-- 开启事务注解驱动 -->  
    <tx:annotation-driven transaction-manager="transactionManager" />
    
    <!-- 配置事物类型 -->
    <tx:advice id="advice" transaction-manager="transactionManager">
     <tx:attributes>
       <!-- 如果其他bean调用这个方法,在其他bean中声明事务,那就用事务.如果其他bean没有声明事务,那就不用事务. SUPPORTS -->
       <tx:method name="find*" propagation="SUPPORTS" />
       <tx:method name="get*" propagation="SUPPORTS" />
       <tx:method name="select*" propagation="SUPPORTS" />
       <!-- 如果有事务,那么加入事务,没有的话新建一个(不写的情况下) REQUIRED -->
       <tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.NullPointerException" no-rollback-for="java.lang.RuntimeException" read-only="false" />
       <tx:method name="add*" propagation="REQUIRED" rollback-for="java.lang.NullPointerException" read-only="false" />
       <tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.NullPointerException" read-only="false" />
       <tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.NullPointerException" read-only="false" />
       <!-- 容器不为这个方法开启事务 NOT_SUPPORTED -->
       <!-- 不管是否存在事务,都创建一个新的事务,原来的挂起,新的执行完毕,继续执行老的事务 REQUIRES_NEW -->
       <!-- 必须在一个已有的事务中执行,否则抛出异常 MANDATORY -->
       <!-- 必须在一个没有的事务中执行,否则抛出异常 NEVER -->
     </tx:attributes>
    </tx:advice>
    <aop:config>
       <aop:pointcut id="pc" expression="execution(public * lishuai.service.*.*(..))" />
       <aop:advisor pointcut-ref="pc" advice-ref="advice" />
    </aop:config>
    
	<!-- 创建SqlSessionFactory -->  
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
      <property name="dataSource" ref="multipleDataSource"></property>
      <property name="configLocation" value="classpath:configuration.xml"></property>
      <property name="typeAliasesPackage" value="lishuai.base.entity"></property>
      <property name="mapperLocations" value="classpath*:mappers/*.xml"></property>
    </bean>
    <!-- 自动扫描映射器 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="lishuai.base.dao" /> 
    </bean> 
    <!-- 扫描service层 -->  
    <context:component-scan base-package="lishuai.service" />
    <context:component-scan base-package="lishuai.security" />
    
    
    <!-- <import resource="spring/security.xml"/>  -->
    
    <!-- <import resource="spring/example1_security.xml"/> -->

</beans>